;; (in-package :clef-lsp/types/lifecycle)

;; Update to the update: Nope, Schemata is unusable. Punting for now
;;
;; Update: Trying Schemata for now. Far from perfect, but does well enough with validation. Still means I'm using
;; hashtables though, as bizzarely unserialize-with-schema does not actually seem to instantiate an object
;;
;; TODO: Unfortunately, I'm giving up on this for now and moving back to just passing around the plain hashtable
;; This is hugely disappointing and needs revisiting. The core issue is the Common Lisp is completely irresponsible
;; (yes, I'm blaming the language) with how it handles classes, in that you can simply does no type checking when constructing an instance.
;; And, seemingly all runtime validation libraries I've looked at have serious flaws in terms of value checking with deftypes or other
;; quirks. IE, sanity-clause outright fails if you use a deftype anywhere.
;;
;; Long-term I want to move the whole codebase to Coalton for static type checking, but I'd still need "something" for runtime. I'm guessing something like,
;; autogenerated class & validation code from JSON schema definitions of LSP types.

(deftype trace-value ()
    "The level of verbosity of the execution trace. https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#traceValue"
    '(member "off" "messages" "verbose"))

(deftype document-uri ()
    "https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#uri"
    'string)

(deftype symbol-kind ()
    "A symbol kind. See LSP SymbolKind specification."
    '(member 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26))

(deftype symbol-tag ()
    "A symbol tag. 1 = Deprecated (see LSP spec)."
    '(member 1))

;; TODO: Is this correct?
(deftype position-encoding-kind ()
    "A position encoding kind. See LSP PositionEncodingKind specification."
    '(member "utf-8" "utf-16" "utf-32"))

(deftype resource-operation-kind ()
    '(member "create" "rename" "delete"))

(defun nullable-p (value schema &rest args)
    (format t "value is ~A~%" value)
    ;; Return T or NIL for validity
    (when (null value)
          T)
    (schemata:validate-with-schema schema value))

(defun failure-handling-kind-p (value schema &rest args)
    (format t "ARGS: ~A~%" (list* value schema args))
    ;; Return T or NIL for validity
    (not (null (member value '("abort" "transactional" "undo" "textOnlyTransactional") :test #'string=))))

(defschema workspace-folder
           (object "workspace-folder"
                   ((uri document-uri
                         :accessor workspace-folder-uri
                         :documentation "The associated URI for this workspace folder.")
                    (name string
                          :accessor workspace-folder-name
                          :documentation "The name of the workspace folder. Used to refer to this workspace folder in the user interface."))))

(defschema client-info
           (object "client-info"
                   ((name string
                          :accessor client-info-name
                          :documentation "The name of the client as defined by the client.")
                    (version string
                             :required nil
                             :accessor client-info-version
                             :documentation "The client's version as defined by the client."))))


(defschema client-capabilities-file-operations
           (object "client-capabilities-file-operations"
                   ((dynamic-registration boolean
                                          :required nil
                                          :accessor client-capabilities-file-operations-dynamic-registration
                                          :documentation "Whether the client supports dynamic registration for file requests/notifications.")
                    (did-create boolean
                                :required nil
                                :accessor client-capabilities-file-operations-did-create
                                :documentation "The client has support for sending didCreateFiles notifications.")
                    (will-create boolean
                                 :required nil
                                 :accessor client-capabilities-file-operations-will-create
                                 :documentation "The client has support for sending willCreateFiles requests.")
                    (did-rename boolean
                                :required nil
                                :accessor client-capabilities-file-operations-did-rename
                                :documentation "The client has support for sending didRenameFiles notifications.")
                    (will-rename boolean
                                 :required nil
                                 :accessor client-capabilities-file-operations-will-rename
                                 :documentation "The client has support for sending willRenameFiles requests.")
                    (did-delete boolean
                                :required nil
                                :accessor client-capabilities-file-operations-did-delete
                                :documentation "The client has support for sending didDeleteFiles notifications.")
                    (will-delete boolean
                                 :required nil
                                 :accessor client-capabilities-file-operations-will-delete
                                 :documentation "The client has support for sending willDeleteFiles requests."))))

(defschema show-message-request-client-capabilities
           (object "show-message-request-client-capabilities"
                   ((message-action-item
                     (object "message-action-item"
                             ((additional-properties-support boolean
                                                             :required nil
                                                             :accessor message-action-item-additional-properties-support
                                                             :documentation "Whether the client supports additional attributes which are preserved and sent back to the server in the request's response.")))
                     :required nil
                     :accessor show-message-request-client-capabilities-message-action-item
                     :documentation "Capabilities specific to the `MessageActionItem` type."))))

(defschema show-document-client-capabilities
           (object "show-document-client-capabilities"
                   ((support boolean
                             :accessor show-document-client-capabilities-support
                             :documentation "The client has support for the show document request."))))

(defschema client-capabilities-window
           (object "client-capabilities-window"
                   ((work-done-progress boolean
                                        :required nil
                                        :accessor client-capabilities-window-work-done-progress
                                        :documentation "Whether the client supports server initiated progress using the `window/workDoneProgress/create` request. (since 3.15.0)")
                    (show-message show-message-request-client-capabilities
                                  :required nil
                                  :accessor client-capabilities-window-show-message
                                  :documentation "Capabilities specific to the showMessage request. (since 3.16.0)")
                    (show-document show-document-client-capabilities
                                   :required nil
                                   :accessor client-capabilities-window-show-document
                                   :documentation "Client capabilities for the show document request. (since 3.16.0)"))))

(defschema client-capabilities-stale-request-support
           (object "client-capabilities-stale-request-support"
                   ((cancel boolean
                            :accessor client-capabilities-stale-request-support-cancel
                            :documentation "The client will actively cancel the request.")
                    (retry-on-content-modified (vector string)
                                               :accessor client-capabilities-stale-request-support-retry-on-content-modified
                                               :documentation "The list of requests for which the client will retry the request if it receives a response with error code `ContentModified`."))))


(defschema workspace-edit-client-capabilities-change-annotation-support
           (object "workspace-edit-client-capabilities-change-annotation-support"
                   ((groups-on-label boolean
                                     :required nil
                                     :accessor workspace-edit-client-capabilities-change-annotation-support-groups-on-label
                                     :documentation "Whether the client groups edits with equal labels into tree nodes, for instance all edits labelled with \"Changes in Strings\" would be a tree node."))))

(defschema did-change-configuration-client-capabilities
           (object "did-change-configuration-client-capabilities"
                   ((dynamic-registration boolean
                                          :required nil
                                          :accessor did-change-configuration-client-capabilities-dynamic-registration
                                          :documentation "Did change configuration notification supports dynamic registration. (since 3.6.0 to support the new pull model.)"))))

(defschema did-change-watched-files-client-capabilities
           (object "did-change-watched-files-client-capabilities"
                   ((dynamic-registration boolean
                                          :required nil
                                          :accessor did-change-watched-files-client-capabilities-dynamic-registration
                                          :documentation "Did change watched files notification supports dynamic registration. Please note that the current protocol doesn't support static configuration for file changes from the server side.")
                    (relative-pattern-support boolean
                                              :required nil
                                              :accessor did-change-watched-files-client-capabilities-relative-pattern-support
                                              :documentation "Whether the client has support for relative patterns or not. (since 3.17.0)"))))

(defschema workspace-symbol-client-capabilities-symbol-kind
           (object "workspace-symbol-client-capabilities-symbol-kind"
                   ((value-set (vector symbol-kind)
                               :required nil
                               :accessor workspace-symbol-client-capabilities-symbol-kind-value-set
                               :documentation "The symbol kind values the client supports. When this property exists the client also guarantees that it will handle values outside its set gracefully and falls back to a default value when unknown. If this property is not present the client only supports the symbol kinds from `File` to `Array` as defined in the initial version of the protocol."))))

(defschema workspace-symbol-client-capabilities-tag-support
           (object "workspace-symbol-client-capabilities-tag-support"
                   ((value-set (vector symbol-tag)
                               :accessor workspace-symbol-client-capabilities-tag-support-value-set
                               :documentation "The tags supported by the client."))))

(defschema workspace-symbol-client-capabilities-resolve-support
           (object "workspace-symbol-client-capabilities-resolve-support"
                   ((properties (vector string)
                                :accessor workspace-symbol-client-capabilities-resolve-support-properties
                                :documentation "The properties that a client can resolve lazily. Usually `location.range`"))))

(defschema execute-command-client-capabilities
           (object "execute-command-client-capabilities"
                   ((dynamic-registration boolean
                                          :required nil
                                          :accessor execute-command-client-capabilities-dynamic-registration
                                          :documentation "Execute command supports dynamic registration."))))

(defschema semantic-tokens-workspace-client-capabilities
           (object "semantic-tokens-workspace-client-capabilities"
                   ((refresh-support boolean
                                     :required nil
                                     :accessor semantic-tokens-workspace-client-capabilities-refresh-support
                                     :documentation "Whether the client implementation supports a refresh request sent from the server to the client. Note that this event is global and will force the client to refresh all semantic tokens currently shown. It should be used with absolute care and is useful for situation where a server for example detect a project wide change that requires such a calculation."))))

(defschema code-lens-workspace-client-capabilities
           (object "code-lens-workspace-client-capabilities"
                   ((refresh-support boolean
                                     :required nil
                                     :accessor code-lens-workspace-client-capabilities-refresh-support
                                     :documentation "Whether the client implementation supports a refresh request sent from the server to the client. Note that this event is global and will force the client to refresh all code lenses currently shown. It should be used with absolute care and is useful for situation where a server for example detect a project wide change that requires such a calculation."))))

(defschema inline-value-workspace-client-capabilities
           (object "inline-value-workspace-client-capabilities"
                   ((refresh-support boolean
                                     :required nil
                                     :accessor inline-value-workspace-client-capabilities-refresh-support
                                     :documentation "Whether the client implementation supports a refresh request sent from the server to the client. Note that this event is global and will force the client to refresh all inline values currently shown. It should be used with absolute care and is useful for situation where a server for example detect a project wide change that requires such a calculation. (since 3.17.0)"))))

(defschema inlay-hint-workspace-client-capabilities
           (object "inlay-hint-workspace-client-capabilities"
                   ((refresh-support boolean
                                     :required nil
                                     :accessor inlay-hint-workspace-client-capabilities-refresh-support
                                     :documentation "Whether the client implementation supports a refresh request sent from the server to the client. Note that this event is global and will force the client to refresh all inlay hints currently shown. It should be used with absolute care and is useful for situation where a server for example detects a project wide change that requires such a calculation. (since 3.17.0)"))))

(defschema diagnostic-workspace-client-capabilities
           (object "diagnostic-workspace-client-capabilities"
                   ((refresh-support boolean
                                     :required nil
                                     :accessor diagnostic-workspace-client-capabilities-refresh-support
                                     :documentation "Whether the client implementation supports a refresh request sent from the server to the client. Note that this event is global and will force the client to refresh all pulled diagnostics currently shown. It should be used with absolute care and is useful for situation where a server for example detects a project wide change that requires such a calculation. (since 3.17.0)"))))

(defschema regular-expressions-client-capabilities
           (object "regular-expressions-client-capabilities"
                   ((engine string
                            :accessor regular-expressions-client-capabilities-engine
                            :documentation "The engine's name.")
                    (version string
                             :required nil
                             :accessor regular-expressions-client-capabilities-version
                             :documentation "The engine's version."))))

(defschema workspace-symbol-client-capabilities
           (object "workspace-symbol-client-capabilities"
                   ((dynamic-registration boolean
                                          :required nil
                                          :accessor workspace-symbol-client-capabilities-dynamic-registration
                                          :documentation "Symbol request supports dynamic registration.")
                    (symbol-kind workspace-symbol-client-capabilities-symbol-kind
                                 :required nil
                                 :accessor workspace-symbol-client-capabilities-symbol-kind
                                 :documentation "Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.")
                    (tag-support workspace-symbol-client-capabilities-tag-support
                                 :required nil
                                 :accessor workspace-symbol-client-capabilities-tag-support
                                 :documentation "The client supports tags on `SymbolInformation` and `WorkspaceSymbol`. Clients supporting tags have to handle unknown tags gracefully. (since 3.16.0)")
                    (resolve-support workspace-symbol-client-capabilities-resolve-support
                                     :required nil
                                     :accessor workspace-symbol-client-capabilities-resolve-support
                                     :documentation "The client support partial workspace symbols. The client will send the request `workspaceSymbol/resolve` to the server to resolve additional properties. (since 3.17.0 - proposedState)"))))


(defschema markdown-client-capabilities
           (object "markdown-client-capabilities"
                   ((parser string
                            :accessor markdown-client-capabilities-parser
                            :documentation "The name of the parser.")
                    (version string
                             :required nil
                             :accessor markdown-client-capabilities-version
                             :documentation "The version of the parser.")
                    (allowed-tags (vector string)
                                  :required nil
                                  :accessor markdown-client-capabilities-allowed-tags
                                  :documentation "A list of HTML tags that the client allows / supports in Markdown. (since 3.17.0)"))))

(defschema client-capabilities-general
           (object "client-capabilities-general"
                   ((stale-request-support client-capabilities-stale-request-support
                                           :required nil
                                           :accessor client-capabilities-general-stale-request-support
                                           :documentation "Client capability that signals how the client handles stale requests. (since 3.17.0)")
                    (regular-expressions regular-expressions-client-capabilities
                                         :required nil
                                         :accessor client-capabilities-general-regular-expressions
                                         :documentation "Client capabilities specific to regular expressions. (since 3.16.0)")
                    (markdown markdown-client-capabilities
                              :required nil
                              :accessor client-capabilities-general-markdown
                              :documentation "Client capabilities specific to the client's markdown parser. (since 3.16.0)")
                    (position-encodings (vector position-encoding-kind)
                                        :required nil
                                        :accessor client-capabilities-general-position-encodings
                                        :documentation "The position encodings supported by the client. (since 3.17.0)"))))

(defschema workspace-edit-client-capabilities
           (object "workspace-edit-client-capabilities"
                   ((document-changes boolean
                                      :required nil
                                      :accessor workspace-edit-client-capabilities-document-changes
                                      :documentation "The client supports versioned document changes in `WorkspaceEdit`s")
                    (resource-operations (vector resource-operation-kind)
                                         :required nil
                                         :accessor workspace-edit-client-capabilities-resource-operations
                                         :documentation "The resource operations the client supports. Clients should at least support 'create', 'rename' and 'delete' files and folders. (since 3.13.0)")
                    (failure-handling string
                                      :required nil
                                      :validator failure-handling-kind-p
                                      :accessor workspace-edit-client-capabilities-failure-handling
                                      :documentation "The failure handling strategy of a client if applying the workspace edit fails. (since 3.13.0)")
                    (normalizes-line-endings boolean
                                             :validator nullable-p
                                             :accessor workspace-edit-client-capabilities-normalizes-line-endings
                                             :documentation "Whether the client normalizes line endings to the client specific setting. If set to `true` the client will normalize line ending characters in a workspace edit to the client specific new line character(s). (since 3.16.0)")
                    (change-annotation-support workspace-edit-client-capabilities-change-annotation-support
                                               :required nil
                                               :accessor workspace-edit-client-capabilities-change-annotation-support
                                               :documentation "Whether the client in general supports change annotations on text edits, create file, rename file and delete file changes. (since 3.16.0)"))))


(defschema client-capabilities-workspace
           (object "client-capabilities-workspace"
                   ((apply-edit boolean
                                :required nil
                                :accessor client-capabilities-workspace-apply-edit
                                :documentation "The client supports applying batch edits to the workspace by supporting the request 'workspace/applyEdit'.")
                    (workspace-edit workspace-edit-client-capabilities
                                    :required nil
                                    :accessor client-capabilities-workspace-workspace-edit
                                    :documentation "Capabilities specific to `WorkspaceEdit`s.")
                    (did-change-configuration did-change-configuration-client-capabilities
                                              :required nil
                                              :accessor client-capabilities-workspace-did-change-configuration
                                              :documentation "Capabilities specific to the `workspace/didChangeConfiguration` notification.")
                    (did-change-watched-files did-change-watched-files-client-capabilities
                                              :required nil
                                              :accessor client-capabilities-workspace-did-change-watched-files
                                              :documentation "Capabilities specific to the `workspace/didChangeWatchedFiles` notification.")
                    (symbol workspace-symbol-client-capabilities
                            :required nil
                            :accessor client-capabilities-workspace-symbol
                            :documentation "Capabilities specific to the `workspace/symbol` request.")
                    (execute-command execute-command-client-capabilities
                                     :required nil
                                     :accessor client-capabilities-workspace-execute-command
                                     :documentation "Capabilities specific to the `workspace/executeCommand` request.")
                    (workspace-folders boolean
                                       :required nil
                                       :accessor client-capabilities-workspace-workspace-folders
                                       :documentation "The client has support for workspace folders. (since 3.6.0)")
                    (configuration boolean
                                   :required nil
                                   :accessor client-capabilities-workspace-configuration
                                   :documentation "The client supports `workspace/configuration` requests. (since 3.6.0)")
                    (semantic-tokens semantic-tokens-workspace-client-capabilities
                                     :required nil
                                     :accessor client-capabilities-workspace-semantic-tokens
                                     :documentation "Capabilities specific to the semantic token requests scoped to the workspace. (since 3.16.0)")
                    (code-lens code-lens-workspace-client-capabilities
                               :required nil
                               :accessor client-capabilities-workspace-code-lens
                               :documentation "Capabilities specific to the code lens requests scoped to the workspace. (since 3.16.0)")
                    (file-operations client-capabilities-file-operations
                                     :required nil
                                     :accessor client-capabilities-workspace-file-operations
                                     :documentation "The client has support for file requests/notifications. (since 3.16.0)")
                    (inline-value inline-value-workspace-client-capabilities
                                  :required nil
                                  :accessor client-capabilities-workspace-inline-value
                                  :documentation "Client workspace capabilities specific to inline values. (since 3.17.0)")
                    (inlay-hint inlay-hint-workspace-client-capabilities
                                :required nil
                                :accessor client-capabilities-workspace-inlay-hint
                                :documentation "Client workspace capabilities specific to inlay hints. (since 3.17.0)")
                    (diagnostics diagnostic-workspace-client-capabilities
                                 :required nil
                                 :accessor client-capabilities-workspace-diagnostics
                                 :documentation "Client workspace capabilities specific to diagnostics. (since 3.17.0)"))))


(defschema client-capabilities
           (object "client-capabilities"
                   ((workspace client-capabilities-workspace
                               :required nil
                               :accessor client-capabilities-workspace
                               :documentation "Workspace specific client capabilities.")
                    (text-document t
                                   :required nil
                                   :accessor client-capabilities-text-document
                                   :documentation "Text document specific client capabilities.")
                    ;; (notebook-document ...) -- omitted as in your original
                    (window client-capabilities-window
                            :required nil
                            :accessor client-capabilities-window
                            :documentation "Window specific client capabilities.")
                    (general client-capabilities-general
                             :required nil
                             :accessor client-capabilities-general
                             :documentation "General client capabilities. (since 3.16.0)")
                    (experimental t
                                  :required nil
                                  :accessor client-capabilities-experimental
                                  :documentation "Experimental client capabilities."))))

(defschema initialize-params
           (object "initialize-params"
                   ((process-id integer
                                :required nil
                                :accessor initialize-params-process-id
                                :documentation "The process Id of the parent process that started the server. Is null if the process has not been started by another process. If the parent process is not alive then the server should exit its process.")
                    (client-info client-info
                                 :required nil
                                 :accessor initialize-params-client-info
                                 :documentation "Information about the client. (since 3.15.0)")
                    (locale string
                            :required nil
                            :accessor initialize-params-locale
                            :documentation "The locale the client is currently showing the user interface in. Uses IETF language tags. (since 3.16.0)")
                    (root-path string
                               :required nil
                               :accessor initialize-params-root-path
                               :documentation "The rootPath of the workspace. Is null if no folder is open. Deprecated in favour of rootUri.")
                    (root-uri document-uri
                              :required nil
                              :accessor initialize-params-root-uri
                              :documentation "The rootUri of the workspace. Is null if no folder is open. If both rootPath and rootUri are set, rootUri wins. Deprecated in favour of workspaceFolders.")
                    ;; TODO: What is this?
                    (initialization-options t
                                            :required nil
                                            :accessor initialize-params-initialization-options
                                            :documentation "User provided initialization options.")
                    (capabilities client-capabilities
                                  :accessor initialize-params-capabilities
                                  :documentation "The capabilities provided by the client (editor or tool).")
                    (trace trace-value
                        :required nil
                        :accessor initialize-params-trace
                        :documentation "The initial trace setting. If omitted trace is disabled ('off').")
                    (workspace-folders (list-of workspace-folder)
                                       :required nil
                                       :accessor initialize-params-workspace-folders
                                       :documentation "The workspace folders configured in the client when the server starts. Only available if the client supports workspace folders. Can be null if none are configured. (since 3.6.0)"))))
